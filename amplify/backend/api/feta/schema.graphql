# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules


type ProfilePicture @model @auth(rules: [
      { allow: owner }
      { allow: public, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
    ]) {
  id: ID!
  imageurl: String
  Profile: Profile @belongsTo
  profileID: String
}

type Profile @model @auth(rules: [
      { allow: owner }
      { allow: public, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
    ]) {
  id: ID!
  email: String
  relation: String
  cognitoID: String
  usernameID: ID @index(name: "byUsername")
  Username: Username @hasOne(fields: ["usernameID"])
  ImagePosts: ImagePost @belongsTo
  first_name: String
  last_name: String
  profilepictureID: ID @index(name: "byProfilePicture")
  profilepicture: ProfilePicture @hasOne(fields: ["profilepictureID"])
  bio: String
  birthday: AWSDateTime
}

type ImagePost @model @auth(rules: [
      { allow: owner }
      { allow: public, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
    ]) {
  id: ID!
  sorterValue: String @index(name: "byTimePosted", sortKeyFields: ["time_posted"])
  description: String
  time_posted: AWSDateTime
  alreadyLiked: Boolean
  likes: [Likes] @hasMany(indexName: "byLikes", fields: ["id"])
  comments: [Comments] @hasMany(indexName: "byComments", fields: ["id"])
  usernameID: ID! @index(name: "byUsername")
  username: Username @hasOne(fields: ["usernameID"])
  profileID: ID! @index(name: "byProfile")
  profile: Profile @hasOne(fields: ["profileID"])
  s3_key: String
  mediaSourceMobile: String
  mediaSourceDesktop: String
  downloadableVideo: String
  posterImage: String
}

type Likes @model @auth(rules: [
      { allow: owner }
      { allow: public, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
    ]) {
      id: ID!
      usernameID: ID! @index(name: "byUsername")
      username: Username @hasOne(fields: ["usernameID"])
      profileID: ID! @index(name: "byProfile")
      profile: Profile @hasOne(fields: ["profileID"])
      imagePostsID: ID! @index(name: "byLikes", sortKeyFields: ["id"])
    }

type Comments @model @auth(rules: [
      { allow: owner }
      { allow: public, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
    ]) {
  id: ID!
  usernameID: ID!
  username: Username @hasOne(fields: ["usernameID"])
  sorterValue: String @index(name: "byTimePosted", sortKeyFields: ["time_posted"])
  profileID: ID! @index(name: "byProfile")
  profile: Profile @hasOne(fields: ["profileID"])
  comment: String
  time_posted: AWSDateTime
  imagePostsID: ID! @index(name: "byComments", sortKeyFields: ["time_posted"])
}

type Username @model @auth(rules: [
      { allow: owner }
      { allow: public, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
    ]) {
  id: ID!
  username: String
  profileID: String
  ImagePosts: ImagePost @belongsTo
  Profile: Profile @belongsTo
}

type SportsGame @model @auth(rules: [
      { allow: owner }
      { allow: public, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
    ]) {
  id: ID! 
  sport: String @index(name: "byStartTime", sortKeyFields: ["startTime"])
  homeTeam: String
  awayTeam: String
  gameInfo: AWSJSON
  startTime: String
  lastUpdate: String
  liveGameChatRoomID: ID @index(name: "byLiveGameChatRoomData")
  livegamechatroom: LiveGameChatRoom @hasOne(fields: ["liveGameChatRoomID"])
  pitchIndex: [BaseballAtBatIndex] @hasMany(indexName: "byBaseballBatIndex", fields: ["id"])
}

type BaseballAtBatIndex @model @auth(rules: [
      { allow: owner }
      { allow: public, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
    ]) {
      id: ID!
      sortKey: String @index(name: "byBatIndex", sortKeyFields: ["batIndex"])
      sportsGameID: ID! @index(name: "byBaseballBatIndex", sortKeyFields: ["batIndex"])
      sportsgame: SportsGame @hasOne(fields: ["sportsGameID"])
      pitchCount: Int
      isOut: String
      count: AWSJSON
      call: String
      hasResult: String
      batIndex: Int
      resultDescription: String
      pitchData: AWSJSON
    }

type LiveGameChatRoom @model @auth(rules: [
      { allow: owner }
      { allow: public, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
    ]){
  id: ID!
  sport: String
  sportsGameID: ID
  sportsgame: SportsGame @hasOne(fields: ["sportsGameID"])
  chatsID: ID
  chats: [Chats] @hasMany(indexName: "byLiveGameChatRoom", fields: ["id"])
}

type HubPosts @model @auth(rules: [
      { allow: owner }
      { allow: public, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
    ]){
  id: ID!
  sortKey: String @index(name: "byTimePosted", sortKeyFields: ["timePosted"])
  postType: String
  timePosted: String
  sportsGameID: ID
  sportsgame: SportsGame @hasOne(fields: ["sportsGameID"])
}

type Chats @model @auth(rules: [
      { allow: owner }
      { allow: public, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
    ]){
  id: ID!
  sortKey: String @index(name: "byTimePosted", sortKeyFields: ["timePosted"])
  usernameID: ID
  username: Username @hasOne(fields: ["usernameID"])
  profileID: ID
  profile: Profile @hasOne(fields: ["profileID"])
  profilePicture: ProfilePicture @hasOne(fields: ["profileID"])
  chat: String
  timePosted: String
  likes: [ChatLikes] @hasMany
  liveGameChatRoomID: ID! @index(name: "byLiveGameChatRoom", sortKeyFields: ["timePosted"])
  livegamechatroom: LiveGameChatRoom @hasOne(fields: ["liveGameChatRoomID"])
}

type ChatLikes @model @auth(rules: [
      { allow: owner }
      { allow: public, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
    ]
  ) {
  id: ID!
  usernameID: ID
  username: Username @hasOne(fields: ["usernameID"])
  profileID: ID
  profile: Profile @hasOne(fields: ["profileID"])
}

